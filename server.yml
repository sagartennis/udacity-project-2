Description: >
  Sagar Sathyanarayanan / Udacity project 2 - Server Infrastructure
  This is a template to deploy the Server infrastructure of the project. The infrastructure contains security groups, Launch
  configuration, Load balancer, autoScaling, Bastion host and IAM.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String

Resources:

  SecGroupLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId:
         Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
    
  SecGroupWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our webApp Hosts and ssh only from local
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        #FromPort: 22
        #ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub "${EnvironmentName} Bastion Security Group"

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          rm -f index.html
          aws s3 cp s3://myawsbucket-udacity-2/index.html
          
          cat index.html
          
          

          
          
          
          
      ImageId: ami-090717c950a5c34d3
      
      SecurityGroups:
      - Ref: SecGroupWebServer
      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet2"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      DesiredCapacity: '4'
      MinSize: '4'
      MaxSize: '6'
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      TargetGroupARNs:
      - Ref: "WebAppTargetGroup"
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2"
      SecurityGroups:
      - Ref: SecGroupLB
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: "80"
      Protocol: "HTTP"

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: "forward"
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: "path-pattern"
        Values: ["/"]
      ListenerArn: !Ref Listener
      Priority: "1"

  BPublicSubnet1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-03d5c68bab01f3496
      InstanceType: t2.micro
      
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PublicSubnet1"
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 1
    
  BPublicSubnet2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-03d5c68bab01f3496
      InstanceType: t2.micro
      
      SubnetId:
        Fn::ImportValue: 
          Fn::Sub: "${EnvironmentName}-PublicSubnet2"
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Bastion Host 2

  BucketInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          -   s3:Get*
          - s3:List*
          Resource:
          -   arn:aws:s3:::myawsbucket-udacity-2/index.html
          -   arn:aws:s3:::myawsbucket-udacity-2/index.html/*
      Roles:
      - Ref: S3BucketRole

Outputs:
    LoadBanlancerEndpoint: 
        Description: this is the endpoint to use for accessing the loadbanlancer
        Value: !Join [ "", [ 'http://', !GetAtt LoadBalancer.DNSName  ]]
        Export:
          Name: !Sub ${EnvironmentName}-LoadBalancerURL
